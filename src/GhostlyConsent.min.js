/**
 *  GhostlyConsent.js 2021
 *  v2.1.0
 *
 *  @author Marcos Raudkett 2021
 *  @license MIT (https://opensource.org/licenses/MIT)
*/
let ghostlyConsent = { _events: [], _state: null, _config: { _debug: !1, _destroy: !1, _data: null, _register: !1, _ajax: !1, _isModal: !1, _useStorage: !1, _length: 365, _text: { acceptSelected: "Accept selected", acceptAll: "Accept all", declineAll: "Decline all", personalize: "Personalize", choose: "Choose the cookies you wish to accept:" }, _elements: { consentWrapper: "#gh-cookie-consent", personalizeWrapper: "#gh-cookie-personalization", modalWrapper: "#gh-modal", buttonsPersonalize: "#gh-cookie-personalize", buttonsEnable: "#gh-cookie-enable", buttonsDecline: "#gh-cookie-decline", buttonsClose: ".gh-close" }, _template: { _isReady: !1, _isLoading: !1, _content: "", _useTemplate: !1, _location: window.location.origin + window.location.pathname.substring(0, window.location.pathname.lastIndexOf("/")) + "/views/", _template: "default.html" }, _cookie: "_ghostly_consent", _path: "." + window.location.host, _callback: null, _style: "", _method: "GET" }, _files: [], _files_original: [], init: function (e = null, t = null, i = null) { var s = this; return this.setOptions(e, t), this._config._template._useTemplate && (this.addEvent("templateLoad", !0), ghostlyConsent.on("templateLoad", (() => { }))), (this._config._template._useTemplate && this._config._template._isReady || document.querySelector(this._config._elements.consentWrapper)) && (this.bindEvents(), "true" == this.get(this._config._cookie) && (this.get("_ghostly_files") ? this.load(JSON.parse(this.get("_ghostly_files"))) : (this.set(JSON.stringify(this._files), "_ghostly_files"), this.load())), this.check() ? this._config._destroy && this.destroy() : this.display(!0), this.addEvent("initialized", !0)), this.register(), new Promise((function (e, t) { s.ready(e, t) })) }, ready: function (e, t) { this._state && e() }, get: function (e) { if (e || (e = this._config._cookie), this._config._useStorage) return localStorage.getItem(e); { let t = e + "=", i = decodeURIComponent(document.cookie).split(";"); for (let e = 0; e < i.length; e++) { let s = i[e]; for (; " " == s.charAt(0);)s = s.substring(1); if (0 == s.indexOf(t)) return s.substring(t.length, s.length) } } return "" }, set: function (e, t = null) { t = t || this._config._cookie; var i = new Date, s = i.getTime(); if (this._length) { Date.prototype.addDays = function (e) { var t = new Date(this.valueOf()); return t.setDate(t.getDate() + this._length), t }; n = (new Date).addDays(this._length) } else var n = s + 2262e7; i.setTime(n), this._config._useStorage ? localStorage.setItem(t, e) : document.cookie = t + "=" + e + "; expires=" + i.toGMTString() + ";domain=" + this._config._path + ";path=/" }, enable: function (e) { this.set(e), e ? (this.addEvent("accepted", !0), this.addEvent("rejected", !1), this.get("_ghostly_files") ? this.load(JSON.parse(this.get("_ghostly_files"))) : (this.set(JSON.stringify(this._files), "_ghostly_files"), this.load())) : (this.addEvent("accepted", !1), this.addEvent("rejected", !0)), this.display(!1), this._config._destroy && this.destroy(), this.addEvent("status", e) }, destroy: function () { var e = document.querySelector(this._config._elements.consentWrapper); e ? e.parentNode.removeChild(e) : this.error("consentWrapper not specified/found.") }, personalize: function (e) { var t = document.querySelector(this._config._elements.consentWrapper), i = document.querySelector(this._config._elements.personalizeWrapper), s = document.querySelector(this._config._elements.buttonsEnable), n = document.querySelector(this._config._elements.buttonsPersonalize); if (e) if (this._files = [], t.classList.contains("personalize")) s && (s.innerText = this._config._text.acceptAll), t.classList.remove("personalize"), t.setAttribute("style", "display:block;"), i && (i.setAttribute("style", "display:none;"), i.innerHTML = ""), this.addEvent("personalize", !1), this._files = this._files_original; else { if (t.classList.add("personalize"), t.setAttribute("style", "height:100%;display:block;"), i) { s && (s.innerText = this._config._text.acceptSelected), i.setAttribute("style", "display:block;"), i.innerHTML = "", i.classList.add("active"); var o = document.createElement("h1"); o.innerText = this._config._text.choose, i.appendChild(o), e.forEach(((e, t) => { if (Array.isArray(e)) { var s = this.search("meta", e); if (e && !e.scope) { arrayFiles = [], checkboxValue = "", e.forEach(((e, t) => { arrayFiles.push(e), checkboxValue = e.name })), (n = document.createElement("div")).classList = "row mt-1 mb-1", n.id = this.guidGenerator(), i.appendChild(n); var n = document.getElementById(n.id), o = this.checkbox(s.name); n.appendChild(o.checkbox); var a = document.createElement("label"); s.title ? a.innerHTML = s.title : a.innerHTML = e.file, a.setAttribute("for", o.id), n.appendChild(a), n.addEventListener("change", (function (t) { ghostlyConsent.consentChange(JSON.stringify(e), o) })) } } else { i.classList.remove("active"), (n = document.createElement("div")).classList = "row mt-1 mb-1", n.id = this.guidGenerator(), i.appendChild(n); n = document.getElementById(n.id), o = this.checkbox(e.name); n.appendChild(o.checkbox); a = document.createElement("label"); e.title ? a.innerHTML = e.title : a.innerHTML = e.file, a.setAttribute("for", o.id), n.appendChild(a), n.addEventListener("change", (function (t) { ghostlyConsent.consentChange(JSON.stringify(e), o) })) } })) } this.addEvent("personalize", !0) } else n.setAttribute("style", "display:none;"), this.addEvent("personalize", null) }, checkbox: function (e) { var t = this.guidGenerator(), i = document.createElement("input"); return i.classList = "ghostly-checkbox", i.id = t, i.type = "checkbox", e.file ? i.value = e.file : i.value = e, { id: t, checkbox: i } }, check: function () { var e = this.get(this._config._cookie); return "" != e && ("false" == e || "true" == e || void 0) }, display: function (e) { var t = document.querySelector(this._config._elements.consentWrapper); t ? e ? (this.addEvent("popupOpened", !0), this.addEvent("popup", !0), t.setAttribute("style", "display:block;")) : (this.addEvent("popupClosed", !0), this.addEvent("popup", !1), t.setAttribute("style", "display:none;")) : this.error('"' + this._config._elements.consentWrapper + '" wrapper was not found.', "display") }, setOptions: function (e = null, t = null) { if (e) { if (void 0 !== e.elements) for (const [t, i] of Object.entries(e.elements)) this._config._elements.hasOwnProperty(t) ? this._config._elements[t] = i : this.error('Option "' + t + " = " + i + '" is invalid.', "setOptions"); if (void 0 !== e.name && (this._config._cookie = e.name), void 0 !== e.domain && (this._config._path = e.domain), void 0 !== e.style && (this._config._style = e.style), void 0 !== e.register && (this._config._register = e.register), void 0 !== e.path && (this._config._path = e.path), void 0 !== e.ajax && (this._config._append = e.ajax), void 0 !== e.callback && (this._config._callback = e.callback), void 0 !== e.length && (this._config._length = e.length), void 0 !== e.debug && (this._config._debug = e.debug), void 0 !== e.isModal && (this._config._isModal = e.isModal), void 0 !== e.destroy && (this._config._destroy = e.destroy), void 0 !== e.storage && (this._config._useStorage = e.storage), void 0 !== e.template && (this._config._template._template = e.template), void 0 !== e.templateLocation && (this._config._template._location = e.templateLocation), void 0 !== e.useTemplate && (this._config._template._useTemplate = e.useTemplate), void 0 !== e.text) for (const [t, i] of Object.entries(e.text)) this._config._text.hasOwnProperty(t) ? this._config._text[t] = i : this.error('Option "' + t + " = " + i + '" is invalid.', "setOptions") } if (t) { this._files = []; for (const [e, i] of Object.entries(t)) this._files.push(i); this._files_original; for (const [e, i] of Object.entries(t)) this._files_original.push(i) } this._state = !0 }, bindEvents: function () { invalid = []; for (const [e, t] of Object.entries(this._config._elements)) { const i = document.querySelector(t); switch (e) { case "buttonsEnable": i ? (i.addEventListener("click", (function () { ghostlyConsent.enable(!0) })), i.innerText = this._config._text.acceptAll) : invalid.push(t); break; case "buttonsDecline": i ? (i.addEventListener("click", (function () { ghostlyConsent.enable(!1) })), i.innerText = this._config._text.declineAll) : invalid.push(t); break; case "buttonsPersonalize": i ? (i.addEventListener("click", (function () { ghostlyConsent.personalize(files) })), i.innerText = this._config._text.personalize) : invalid.push(t); break; case "buttonsClose": i && i.addEventListener("click", (function () { ghostlyConsent.display(!1) })) } } invalid.forEach(((e, t) => { this.error("Failed to bind event to: " + e) })) }, load: function (e = null) { e && (this._files = e), loaded = {}, loaded.files = [], this._files.forEach(((e, t) => { if (!e.disallowed) if (Array.isArray(e)) { var i = this.search("permissions", e); this.search("meta", e); i.disallowed || void 0 === i || e.forEach(((e, t) => { e.disallowed || e && !e.scope && (loaded.files.push(e), !e._ajax && e.type ? this._config._ajax || (this.appendFile(e), this.addEvent("appendFile", e)) : (this.getFile(e), this.addEvent("getFile", e))) })) } else loaded.files.push(e), this._config._ajax || e.ajax || !e.type ? (this.getFile(e), this.addEvent("getFile", e)) : (this.appendFile(e), this.addEvent("appendFile", e)) })), this._config._callback && this.sendCallback(this._config._callback, loaded), this.addEvent("filesLoaded", this) }, getFile: async function (e) { var t = new XMLHttpRequest; e.method ? t.open(e.method, e.file, !0) : t.open(this._config._method, e.file, !0), t.send(), t.onreadystatechange = function () { return t.responseText } }, loadTemplate: async function () { var e = new XMLHttpRequest; e.open("GET", `${this._config._template._location}`, !0), e.send(), e.onreadystatechange = function () { if (4 == this.readyState && 200 == this.status) return ghostlyConsent._config._template._content = e.responseText, ghostlyConsent.addEvent("templateLoaded", !0), ghostlyConsent._config._template._isReady = !0, ghostlyConsent.appendFile({ file: e.responseText, type: "template" }), e.responseText } }, getTemplate: function () { return this.loadTemplate() }, appendFile: function (e) { if (e.type) switch (e.type) { default: case "js": var t = document.createElement("script"); t.type = "text/javascript", t.src = e.file, document.head.appendChild(t); break; case "css": var i = document.createElement("link"); i.setAttribute("rel", "stylesheet"), i.setAttribute("href", e.file), document.head.appendChild(i); break; case "template": if (this._config._template._isReady && this._config._template._content) if (0 == document.getElementsByTagName("ghostly").length) { var s = document.createElement("ghostly"); s.innerHTML = e.file, document.body.appendChild(s), setTimeout((() => { ghostlyConsent.init() }), 100) } } else this.error('Missing file "type":'), this.error(e) }, sendCallback: function (e, t) { var i = new XMLHttpRequest; t = JSON.stringify(t); i.open("POST", e, !0), i.setRequestHeader("Content-Type", "application/json;charset=UTF-8"), i.send(t) }, search: function (e, t) { for (var i = 0; i < t.length; i++)if (t[i].scope === e) return t[i] }, guidGenerator() { var e = function () { return (65536 * (1 + Math.random()) | 0).toString(16).substring(1) }; return e() + e() + "-" + e() + "-" + e() + "-" + e() + "-" + e() + e() + e() }, error: function (e, t = null) { t ? (console.log("%c GhostlyConsent.js - " + t + ": " + e, "background: #151515; color: #ff304d"), this._config._debug && alert("GhostlyConsent.js - " + t + ": " + e)) : (console.log("%c GhostlyConsent.js - " + e, "background: #151515; color: #ff304d"), this._config._debug && alert("GhostlyConsent.js - " + e)), this.addEvent("error", e) }, document_ready: function (e) { "complete" === document.readyState || "interactive" === document.readyState ? setTimeout(e, 1) : document.addEventListener("DOMContentLoaded", e) }, register: function () { if (this._config._register && !this.get("_ghostly_register")) { var e = document.location.hostname, t = new XMLHttpRequest; t.onreadystatechange = function () { 4 == this.readyState && 200 == this.status && this.set(!0, "_ghostly_register") }, t.open("GET", "https://api.marcosraudkett.com/register?source=" + e + "&app=ghostlyConsent.js", !0), t.send() } }, consentChange: function (e, t) { this._files_consent = []; e = JSON.parse(e); this._files.length > 0 ? (exists = !1, this._files.forEach(((i, s) => { if (Array.isArray(e)) { exists = !1; var n = this.search("meta", i); t.checkbox.checked ? (n.name == t.checkbox.defaultValue && (exists = !0), exists || this._files.push(e)) : n.name == t.checkbox.defaultValue && this._files.splice(s, 1) } else exists = !1, t.checkbox.checked ? (i.name == t.checkbox.defaultValue && (exists = !0), exists || this._files.push(e)) : i.name == t.checkbox.defaultValue && this._files.splice(s, 1); exists = !1 }))) : this._files.push(e) }, addEvent: function (e, t) { this._events.push({ event: e, value: t }), setTimeout((() => { if ("initialized" == e) { var t = document.querySelector(this._config._elements.buttonsPersonalize); !this._files.length > 0 && t.remove() } }), 100) }, on: function (e, t) { var i = this._events; setInterval((function () { i.length > 0 && i.forEach(((s, n) => { e == s.event && (i.splice(n, 1), t(s)), "templateLoad" != s.event || ghostlyConsent._config._template._isLoading || (ghostlyConsent.getTemplate(), ghostlyConsent._config._template._isLoading = !0, i.splice(n, 1)) })) }), 100) }, addFiles: function (e) { this.addEvent("addFiles", !0), Array.isArray(e) ? e.length > 0 ? this._files = e : this.error("addFiles array cannot be empty.") : this.error("addFiles expected an array.") }, addFile: function (e) { this.addEvent("addFile", !0), Array.isArray(e) ? this.error("addFile expected an object. but got array instead") : this._files.push(e) }, getFiles: function () { return this._files } };